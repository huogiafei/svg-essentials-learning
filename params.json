{
  "name": "Svg-essentials-learning",
  "tagline": "SVG Essentials 2nd Edition learning",
  "body": "SVG Essentials learning\r\n============================\r\n\r\n####　　本来还想说一鼓作气先看完这本书再开始写这篇markdown的，没想到看到svg滤镜这一章，我整个人都方了，莫慌，先给自己回回血。\r\n\r\n---------------------------------------------\r\n\r\n**long long ago(此处可略过)**\r\n\r\n　　其实最早知道svg这回事是在icomoon.io上面，才发现矢量图标的强大，到后来在codrops接触到狂拽炫酷diao炸天的svg animation，\r\n还有D3.js，那时候只想说一句：“教练，我要学svg”。那都已经是1年前的事情，而且发现国内的资料太少了，所以就有了这本书的读后感，还有\r\n分享一些个人觉得不错的svg学习资料。\r\n\r\n- [oxxo studio](http://www.oxxostudio.tw/articles/201410/svg-tutorial.html)\r\n- [张鑫旭](http://www.zhangxinxu.com/)\r\n- [W3cplus](http://www.w3cplus.com/blog/tags/411.html)\r\n- [MDN SVG](https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial)\r\n- [jenkov SVG Tutorial](http://tutorials.jenkov.com/svg/index.html)\r\n- [W3C SVG](https://www.w3.org/TR/SVG/Overview.html)\r\n\r\n\r\n　　虽然这本SVG Essential比起CSS Secrets是差了那么一点（最想吐槽就是书上的demo），但是内容方面还是挺全面的，svg入门看还是非常合适的，\r\n咬咬牙，为了snap和D3,豁出去了。\r\n\r\n**SVG书籍**\r\n\r\n- [SVG Text Layout](http://shop.oreilly.com/product/0636920043072.do) \r\n- [SVG Colors, Patterns & Gradients](http://shop.oreilly.com/product/0636920043065.do) （正在翻译）\r\n- [数据可视化实战：使用D3设计交互式图表](http://www.ituring.com.cn/book/1126)\r\n\r\n**SVG工具**\r\n\r\n- [vector paint](http://vectorpaint.yaks.co.nz/)\r\n- [http://editor.method.ac/](http://editor.method.ac/) 强大在线svg Editor\r\n- [svg path](http://jxnblk.com/paths/) 学习path的时候用得上\r\n- [svgomg](https://jakearchibald.github.io/svgomg/) SVGO的在线编辑\r\n- AI,Inkscape \r\n\r\n**SVG框架**\r\n\r\n- [snap.svg](http://snapsvg.io/) SVG动画框架，也是我最想学的\r\n- [D3.js](https://d3js.org/) SVG视觉图表框架，给我感觉就是高大上\r\n\r\n-------------------------------------------------------------\r\n\r\n\r\n\r\n**CH01 入门指南**\r\n\r\n　　这章主要介绍了svg的背景和用途，把基本的形状和元素都介绍了一遍，可能刚刚看完css secrets，给我感觉就是积木（bg-image）和一盘围棋的感觉（路径）\r\n\r\n**CH02 使用SVG**\r\n\r\n　　介绍了使用svg的四种方法:\r\n\r\n- img\r\n- css(background,list-image,border-image)\r\n- object\r\n- inline svg(个人推荐)\r\n\r\n**CH03 坐标系统**\r\n\r\n　　svg相当于画布，下面是一些基本属性\r\n\r\n- width/height 画布的大小\r\n- viewBox\r\n- preserveAspectRatio,当w/h 和 viewBox 宽高比不一样，需要指定对齐方式\r\n- meet/slice 同上，需要指定适配边缘还是裁剪\r\n\r\n**CH04 基本形状**\r\n\r\n- line线段，需要起点和终点（x1,y1,x2,y2）\r\n- fill 填充颜色\r\n- fill-opacity 填充透明度\r\n- stroke-width 笔尖粗细，原谅我写的接地气一点\r\n- stroke 笔画颜色，注意不是stroke-color，支持rgba,rgb,hsl,hsla颜色格式，默认是none\r\n- stroke-opacity 笔画透明度\r\n- stroke-dasharray，实现点线、虚线（线长度，空隙长），css secrets里面还利用这个属性实现饼图\r\n- rect（x,y,width,height,rx,ry）,除了必须参数起点坐标和宽高外，还可以设置rx/ry得到圆角矩形\r\n- circle (cx,cy,r)，需要圆心坐标和半径\r\n- ellipse (cx,cy,rx,ry) 跟circle基本一样，除了r分成了rx和ry\r\n- polygon (xi,yi) 一系列的x/y坐标，最后会自动回到起始坐标\r\n- fill-rule填充规则，nonzero(default)/evenodd\r\n- polyline 折线 ，和polygon的区别在于不闭合为形状\r\n- stroke-linecap线的端点，三个值分别为square,round,butt,前两者在端点位置增加一个形状\r\n- stroke-linejoin 折线位置的形状，有三个值为miter(尖)，round(圆),bevel(平)\r\n- stroke-miterlimit 斜切长度除以线段宽度\r\n\r\n**CH05 文档解构**\r\n\r\n- svg中使用样式：\r\n - inline\r\n - internal stylesheets\r\n - external stylesheets\r\n - Presentation Attributes，我的理解是直接去掉style的内联写法，不过因为优先级是最低。\r\n- g 把子元素作为一个组合\r\n- defs 定义一个组合，只定义不显示(gradient,path,clipPath,mask,filter,marker等等)\r\n- symbol 加强版defs，指定viewBox和preserveAspectRatio属性\r\n- use 重用上面三个定义的图形 (xlink:href)，可以指定图形位置\r\n- image 支持jpg和png\r\n\r\n**CH06 坐标系统变换**\r\n\r\n- translate 移动整个坐标系统，和x='10',y='10'单独移动元素不一样\r\n- scale 坐标系统缩放，所以会影响元素的坐标和stroke-width\r\n- transform order 这点和css一样，变换的顺序会影响变换效果\r\n- 笛卡尔坐标变换 水平翻转和垂直翻转，同样适用css transform\r\n- rotate 默认旋转中心为0,0,rotate(deg,50,50)可以围绕中心点旋转\r\n- 围绕中心点缩放 ,translate(-centerX*(n-1), -centerY*(n-1)) scale(n)\r\n- skewX/skewY\r\n- Transform Matrix\r\n\r\n**CH07 路径**\r\n\r\n 　　**所有基本形状都是path元素的简写形式**\r\n \r\n- M(moveto) 起始位置 \r\n- L(lineto) 连线到\r\n- Z(closepath) 关闭路径\r\n- m/l/z(相对位置) 其实只有l是相对于上一个坐标定位,m和z都是和大写字母的效果一样\r\n- H/V(h/v) 绘制水平/垂直线，小写是相对坐标，这两个字母属于lineto的快捷方式\r\n- A(a) 弧线(rx,ry,x-axis-rotation,large-arc-flag,sweep-flag,endX,endY)，解释一下7个参数：\r\n - 椭圆的x轴半径和y轴半径\r\n - x轴旋转角度\r\n - 圆弧角度大于180度，为0,小于180度，为1\r\n - 负角度绘制为0 ，正角度为1，我的理解是顺/逆时针\r\n - 终点x,y\r\n- Q(q) 二次贝塞尔曲线,(Q hx hy,ex,ey),Q后面跟着一个控制点和下一个点\r\n- T(t) 多边二次贝塞尔，自动计算控制点，只需要后面跟着下一个点,我的理解是和上一个曲线的斜率一样\r\n- C(c) 三次贝塞尔曲线，和二次贝塞尔曲线比较，每个端点对于于一个控制点，就是一条线段有两个控制点\r\n- S(s) 和T作用类似，自动算出平滑曲线 \r\n- marker\r\n - markerWidth/markerHeight \r\n - marker-start/marker-mid/marker-end marker放置位置\r\n - orient marker跟随路径方向\r\n \r\n**CH08 图案和渐变**\r\n\r\npattern:\r\n\r\n- patternUnits 分别有objectBoundingBox(object),userSpaceOnUse(user)两个值，默认值为object\r\n - object: 按百分比填充对象  例如width=\"20%\" height=\"20%\"，就是每个tile占画布的20%\r\n - user: 以相同大小平铺\r\n- patternContentUnits 也是和patternUnits值一样有两个，不过默认值是userSpaceOnUse\r\n \r\n\r\ngradient\r\n\r\n- linearGradient\r\n - (x1,y1) (x2,y2)决定渐变方向，默认发现是左到右\r\n - stop offset 渐变位置\r\n - stop color 渐变颜色\r\n- radialGradient 除了没有方向，其他参数和linearGradient一样，还多了个投射点(fx,fy)\r\n- spreadMethod \r\n - pad 起始和结束渐变点会扩展到对象的边缘\r\n - repeat 渐变会重复起点到终点的过程\r\n - reflect 渐变会按终点到起点、起点到终点的排列重复\r\n \r\n**CH09 文本**\r\n \r\n- 基本属性（和css相对应）：font-family,font-size,font-weight,font-style,text-decoration\r\n    word-spacing,letter-spacing\r\n- text-anchor(文本对齐) start/middle/end\r\n- tspan类似于p里面的span标签，有偏移量（dx,dy）和baseline-shift（sub,super）两个属性\r\n- textLength 设置文本长度 ，lengthAdjust可以调整字符间距\r\n - spacing 只调整字符间距\r\n - spacingAndGlyphs 调整字符长度和字符间距\r\n- textPath 文本路径 ，startOffset可以调整开始位置\r\n\r\n**CH10 裁剪和蒙版**\r\n\r\n- 裁剪：clipPath ,clip-path ,clipPathUnits\r\n- 蒙版：mask \r\n\r\n**CH11 滤镜**\r\n\r\n容我说两句：滤镜虽然学起来挺费劲，但是效果和css的完全filter不是一个概念。\r\n\r\n- feGaussianBlur高斯模糊，stdDeviation参数和模糊程度成正比，结合feOffset偏移和feMerge合并制造阴影效果\r\n- feColorMatrix 改变颜色\r\n- feImage 图片作为滤镜输入源\r\n- feComponentTransfer 调色\r\n- feComposite 两个输入源层叠效果\r\n- feBlend \r\n- feFlood 纯色填充\r\n- feTile 背景填充\r\n- feDiffuseLighting/feSpecularLighting 漫反射/镜面反射\r\n- feMorphology 加粗减细\r\n- feConvolveMatrix  模糊、锐化、浮雕和斜切效果\r\n- feDisplacementMap\r\n- feTurbulence纹理效果\r\n\r\n**CH12 SVG动画**\r\n\r\n- animate,attributeName,attributeType,from,to,begin,dur\r\n- repeatCount 重复次数（indefinite为无限循环），repeatDur 持续时间， 二选一\r\n- calcMode 动画多个值时，持续时间比例， paced,linear,discrete,spline\r\n- set 简化版animate,只需要to和时间属性\r\n- animateTransform 适用于transform的动画\r\n- animateMotion 路径运动，AE即视感有木有\r\n- keyTimes 动画时间，\r\n - 若干个0~1的浮点数\r\n - 后面的值一定大于前面\r\n - 和values的值数量一样\r\n - 使用了linear 和 discrete,keyTimes第一个值为0\r\n - 使用了from和to,indefinite被忽略\r\n\r\n**CH13 添加交互**\r\n \r\n- 和html使用a标签有点不一样,格式:\\<a xlink:href=\"\"\\> \r\n- elementID.eventName使用交互动画\r\n\r\n**CH14 使用svg dom**\r\n\r\n- snap.svg 更容易操作svg\r\n- window.requestAnimationFrame\r\n\r\n\r\n---------------------------------\r\n\r\n**一点感想**\r\n\r\n　　最初接触svg的时候，天真的以为设计师用ai做好svg给你就可以用，甚至可以做出一些炫酷的动画，工作一段时间之后才发现，这些svg什么的还是我们前端自己搞掂吧，至少在中国\r\n是非常缺乏的，还记得那时候我叫“美工”发我一个矢量图，打开之后还居然是糊的，我真的是身体被掏空一样。\r\n　　svg除了滤镜和动画那一块需要花多点功夫之外，其余的都算是比较好理解，整本书看下来再加上oxxo studio svg的教程，打个比喻就是数学老师和美术老师教你画画的感觉。虽然说\r\nsvg是前端的一个小分支，但是未来很有前途，设计师不学，就让我们这些苦逼的FE来吧。\r\n　　走过这座山之后（填完这个坑），还有snap.svg 和D3.js ，想想都有点小激动(简直涕泗横流)。\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}